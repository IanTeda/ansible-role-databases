---


## 00. SET INFLUXDB ANSIBLE FACTS
# This makes it easier to read the ansible tasks
# -----------------------------------------------------------------------------

- name: Set Influxdb facts for the role
  ansible.builtin.set_fact:
    influxdb_user: "{{ databases_influxdb.user }}"
    influxdb_group: "{{ databases_influxdb.group }}"
    influxdb_home_dir: "/opt/{{ databases_influxdb.user }}"
    influxdb_config_dir: "/etc/{{ databases_influxdb.user }}"
    influxdb_config_file: "/etc/{{ databases_influxdb.user }}/{{ databases_influxdb.user }}.conf"
    influxdb_data_dir: "/data/{{ databases_influxdb.user }}"
    influxdb_systemd_name: "{{ databases_influxdb.user }}"
    influxdb_download_url: "https://github.com/influxdata/influxdb/archive/refs/tags/v{{ databases_influxdb.release }}.tar.gz"
    influxdb_binary_path: "/usr/local/bin/{{ databases_influxdb.user }}"
  tags:
    - install
    - config
    - build
    - healthcheck
    - uninstall

- name: Display influxdb variables for debugging
  ansible.builtin.debug:
    var: databases_influxdb
  tags:
    - debug

- name: Display influxdb facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> influxdb_user: {{ influxdb_user }}"
      - "Fact -> influxdb_group: {{ influxdb_group }}"
      - "Fact -> influxdb_home_dir: {{ influxdb_home_dir }}"
      - "Fact -> influxdb_config_dir: {{ influxdb_config_dir }}"
      - "Fact -> influxdb_config_file: {{ influxdb_config_file }}"
      - "Fact -> influxdb_data_dir: {{ influxdb_data_dir }}"
      - "Fact -> influxdb_systemd_name: {{ influxdb_systemd_name }}"
      - "Fact -> influxdb_download_url: {{ influxdb_download_url }}"
      - "Fact -> influxdb_binary_path: {{ influxdb_binary_path }}"
  tags:
    - debug

- name: Confirm influxdb uninstallation
  ansible.builtin.pause:
    prompt: |
      ‚ö†Ô∏è  WARNING: influxdb Uninstallation Confirmation ‚ö†Ô∏è
      
      You are about to completely uninstall the influxdb service from this system.
      
      This will remove:
      üóëÔ∏è  Service binary: {{ influxdb_binary_path }}
      üóëÔ∏è  Systemd service: {{ influxdb_systemd_name }}.service
      üóëÔ∏è  Configuration files: {{ influxdb_config_dir }}/
      üóëÔ∏è  User account: {{ influxdb_user }}
      üóëÔ∏è  UFW firewall rules: influxdb profile
      üóëÔ∏è  Prometheus scraper config: /etc/prometheus/conf.d/{{ influxdb_systemd_name }}.yml
      
      ‚ùó This action will stop metrics collection from your influxdb instance!
      üìä Historical metrics data in Prometheus will be preserved
      
      Are you sure you want to proceed with the uninstallation? (yes/no)
  register: uninstall_confirmation
  tags:
    - never
    - uninstall

- name: Uninstallation Aborted
  ansible.builtin.fail:
    msg: |
      üõë Uninstallation aborted by user choice
      
      The influxdb service remains installed and operational.
      No changes have been made to the system.
  when: not (uninstall_confirmation.user_input | bool)
  tags:
    - never
    - uninstall


## 01. SHUTDOWN INFLUXDB SERVICES
# This section ensures that the service is stopped before config changes and
# updates are applied to prevent conflict issues.
# -----------------------------------------------------------------------------

- name: Check if influxdb service exists
  ansible.builtin.stat:
    path: "/lib/systemd/system/{{ influxdb_systemd_name }}.service"
  register: service_file
  tags:
    - install
    - config

- name: Ensure influxdb service is stopped before modifying
  ansible.builtin.systemd:
    name: "{{ influxdb_systemd_name }}"
    state: stopped
  become: true
  failed_when: false
  when: service_file.stat.exists
  tags:
    - install
    - config

- name: Stop and disable influxdb service during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: "{{ influxdb_systemd_name }}"
    state: stopped
    enabled: no
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

## 02. SET UP INFLUXDB USER & CREATE SERVICE DIRECTORIES
# This section sets up the system user and group to run the service and create
# all the directories for the service
# -----------------------------------------------------------------------------

- name: Ensure {{ influxdb_group }} group exists
  ansible.builtin.group:
    name: "{{ influxdb_group }}"
    state: present
  become: true
  tags:
    - user_group
    - install

- name: Create influxdb system user "{{ influxdb_user }}"
  ansible.builtin.user:
    name: "{{ influxdb_user }}"
    group: "{{ influxdb_group }}"
    system: yes
    shell: /usr/sbin/nologin
    create_home: yes
    home: "{{ influxdb_home_dir }}"
    comment: "InfluxDB Service System Account"
  become: true
  tags:
    - user_group
    - install

- name: Remove influxdb user "{{ influxdb_user }}"
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.user:
    name: "{{ influxdb_user }}"
    state: absent
    remove: yes
    force: yes
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

- name: Remove InfluxDB group "{{ influxdb_group }}" on uninstall
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.group:
    name: "{{ influxdb_group }}"
    state: absent
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

- name: Create directories for influxdb service
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ influxdb_user }}"
    group: "{{ influxdb_group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ influxdb_config_dir }}", mode: "u=rwx,g=rw,o="}
    - { path: "{{ influxdb_data_dir }}",   mode: "u=rwx,g=r,o="}
    - { path: "{{ influxdb_data_dir }}/object_store",   mode: "u=rwx,g=r,o="}
    - { path: "{{ influxdb_data_dir }}/meta",   mode: "u=rwx,g=r,o="}
    - { path: "{{ influxdb_data_dir }}/wal",   mode: "u=rwx,g=r,o="}
  become: true
  tags:
    - directories
    - install
    - config

- name: Remove directories for influxdb service during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: "{{ influxdb_home_dir }}",   mode: "u=rwx,g=rw,o=" }
    - { path: "{{ influxdb_config_dir }}", mode: "u=rwx,g=rw,o=" }
    - { path: "{{ influxdb_data_dir }}",   mode: "u=rwx,g=r,o="  }
  become: true
  tags:
    - never 
    - uninstall

## 03. DOWNLOAD, BUILD, INSTALL & VERIFY INFLUXDB
# This section downloads and compiles the InfluxDB service binary
# -----------------------------------------------------------------------------

- name: Install required packages for building InfluxDB
  ansible.builtin.apt:
    name:
      - build-essential
      - gcc
      - g++
      - binutils
      - pkg-config
      - libssl-dev
      - ca-certificates
      - golang
      - python3
      - python3.11-dev
      - protobuf-compiler
      - lld
    state: present
    update_cache: yes
    force: yes
  become: true
  tags:
    - install
    - build

- name: Debug linker for build user
  ansible.builtin.shell: |
    which ld && ld --version && which gcc && gcc --version
  become: true
  become_user: "{{ influxdb_user }}"
  register: linker_check
  ignore_errors: true
  tags:
    - debug

- name: Show linker debug output
  ansible.builtin.debug:
    var: linker_check.stdout_lines
  tags:
    - debug

- name: Debug Go and Rust versions for build user
  ansible.builtin.shell: |
    go version && rustc --version && cargo --version
  become: true
  become_user: "{{ influxdb_user }}"
  register: gorust_check
  ignore_errors: true
  tags:
    - debug

- name: Show Go/Rust debug output
  ansible.builtin.debug:
    var: gorust_check.stdout_lines
  tags:
    - debug

- name: "Install rustup for '{{ influxdb_user }}' user"
  ansible.builtin.shell: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
  become: true
  become_user: "{{ influxdb_user }}"
  tags:
    - install
    - build

- name: "Ensure rustup is initialized for '{{ influxdb_user }}' user"
  ansible.builtin.command:
    cmd: "rustup toolchain install stable"
    creates: "{{ influxdb_home_dir }}/.cargo/bin/rustc"
  become: true
  become_user: "{{ influxdb_user }}"
  tags:
    - install
    - build

- name: "Clone InfluxDB repo at tag v{{ databases_influxdb.release }}"
  ansible.builtin.get_url:
    url: "{{ influxdb_download_url }}"
    dest: "/tmp/influxdb.tar.gz"
    owner: "{{ influxdb_user }}"
    group: "{{ influxdb_group }}"
    mode: '0644'
  tags:
    - install
    - build

- name: Clone InfluxDB git repository at release tag
  ansible.builtin.git:
    repo: 'https://github.com/influxdata/influxdb.git'
    dest: "/tmp/influxdb-{{ databases_influxdb.release }}"
    version: "v{{ databases_influxdb.release }}"
    update: no
    force: yes
    clone: yes
    accept_hostkey: yes
  become: true
  become_user: "{{ influxdb_user }}"
  tags:
    - install
    - build

- name: Ensure build user owns all source files before building
  ansible.builtin.file:
    path: "/tmp/influxdb-{{ databases_influxdb.release }}"
    state: directory
    owner: "{{ influxdb_user }}"
    group: "{{ influxdb_group }}"
    recurse: yes
  become: true
  tags:
    - install
    - build

- name: Build InfluxDB with cargo
  ansible.builtin.shell: |
    {{ influxdb_home_dir }}/.cargo/bin/cargo build --release
  args:
    chdir: "/tmp/influxdb-{{ databases_influxdb.release }}"
  environment:
    RUSTUP_HOME: "{{ influxdb_home_dir }}/.rustup"
    CARGO_HOME: "{{ influxdb_home_dir }}/.cargo"
    PATH: "{{ influxdb_home_dir }}/.cargo/bin:{{ ansible_env.PATH }}"
  become: true
  become_user: "{{ influxdb_user }}"
  tags:
    - install
    - build

- name: Install compiled influxdb binary
  ansible.builtin.copy:
    src: '/tmp/influxdb-{{ databases_influxdb.release }}/target/release/influxdb3'
    dest: '{{ influxdb_binary_path }}'
    owner: root
    group: root
    mode: '0755'
    remote_src: yes
  become: true
  tags:
    - install
    - build

- name: Verify InfluxDB binary is installed and executable
  ansible.builtin.stat:
    path: "{{ influxdb_binary_path }}"
  register: influxdb_binary_stat
  tags:
    - install
    - build
    - verify

- name: Assert InfluxDB binary exists and is executable
  ansible.builtin.assert:
    that:
      - influxdb_binary_stat.stat.exists
      - influxdb_binary_stat.stat.executable
    fail_msg: "InfluxDB binary is missing or not executable at {{ influxdb_binary_path }}"
    success_msg: "InfluxDB binary is present and executable at {{ influxdb_binary_path }}"
  tags:
    - install
    - build
    - verify

- name: Remove InfluxDB source directory after build
  ansible.builtin.file:
    path: "/tmp/influxdb-{{ databases_influxdb.release }}"
    state: absent
  tags:
    - install
    - cleanup
    - build

- name: Remove Rust install after build
  ansible.builtin.file:
    path: "{{ influxdb_home_dir }}/.cargo"
    state: absent
  become: true
  when: uninstall_confirmation.user_input | bool
  tags:
    - uninstall
    - cleanup
    - build
  
- name: Uninstall compiled influxdb binary
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: '{{ influxdb_binary_path }}'
    state: absent
  tags:
    - never
    - uninstall



## 00 INSTALL INFLUX BINARY (OTPIONAL)
# This is an option section to install the precompiled binaries in leu of compiling
# from source
# ------------------------------------------------------------------------------

- name: Download InfluxDB binary
  ansible.builtin.get_url:
    url: "https://dl.influxdata.com/influxdb/releases/influxdb2-2.7.5-linux-amd64.tar.gz"
    dest: /tmp/influxdb.tar.gz
    mode: '0644'
  become: true
  tags:
    - never
    - binary

- name: Extract InfluxDB binary
  ansible.builtin.unarchive:
    src: /tmp/influxdb.tar.gz
    dest: /usr/local/
    remote_src: yes
    creates: /usr/local/influxdb2-2.7.5-linux-amd64
  become: true
  tags:
    - never
    - binary

- name: Symlink influxdb binary to /usr/local/bin
  ansible.builtin.file:
    src: /usr/local/influxdb2-2.7.5-linux-amd64/influxd
    dest: /usr/local/bin/influxd
    state: link
    force: yes
  become: true
  tags:
    - never
    - binary



## INFLUX CONFIGURATION
# -----------------------------------------------------------------------------

- name: Deploy InfluxDB configuration
  ansible.builtin.template:
    src: templates/influxdb.conf.j2
    dest: "{{ influxdb_config_file }}"
    owner: influxdb
    group: influxdb
    mode: '0640'
  become: true
  tags:
    - install
    - config

# Not supported as of now
# - name: Check InfluxDB configuration file syntax
#   ansible.builtin.command: "{{ influxdb_binary_path }} config check --config-file {{ influxdb_config_file }}"
#   register: influxdb_config_check
#   changed_when: false
#   failed_when: influxdb_config_check.rc != 0
#   become: true
#   tags:
#     - verify
#     - config
#     - influxdb



## 05. SETUP SYSTEMD FOR INFLUXDB
# -----------------------------------------------------------------------------
- name: Deploy systemd unit for InfluxDB
  ansible.builtin.template:
    src: templates/influxdb-systemd.service.j2
    dest: "/lib/systemd/system/{{ influxdb_systemd_name }}.service"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Verify InfluxDB systemd service config is valid
  ansible.builtin.command: "systemd-analyze verify /lib/systemd/system/{{ influxdb_systemd_name }}.service"
  register: influxdb_systemd_verify
  changed_when: false
  failed_when: influxdb_systemd_verify.rc != 0
  tags:
    - install
    - config
    - verify

- name: Reload systemd and start InfluxDB service
  ansible.builtin.systemd_service:
    daemon_reload: true
    name: "{{ influxdb_systemd_name }}"
    enabled: true
    state: started
  become: true
  tags:
    - install
    - config

- name: Verify InfluxDB service is active
  ansible.builtin.systemd:
    name: "{{ influxdb_systemd_name }}"
  register: influxdb_service_status
  changed_when: false
  tags:
    - verify
    - healthcheck

- name: Assert InfluxDB service is running
  ansible.builtin.assert:
    that:
      - influxdb_service_status.status.ActiveState == "active"
    fail_msg: "InfluxDB service is NOT active."
    success_msg: "InfluxDB service is active."
  tags:
    - verify
    - healthcheck



## 06. INITIALS INFLUXDB DATABASE
# Iniitalise an InfluxDB database
# -----------------------------------------------------------------------------

# - name: Create a new database using admin token
#   ansible.builtin.command: >
#     {{ influxdb_binary_path }} create database {{ influxdb_user }} --host http://{{ databases_influxdb.listen_address }}:{{ databases_influxdb.port }} --token {{ databases_admin.password }}
#   register: influxdb_create_db
#   become: true
#   become_user: "{{ influxdb_user }}"
#   tags:
#     - install
#     - config
#     - admin



## 06. SETUP FIREWALL FOR INFLUXDB
# -----------------------------------------------------------------------------

- name: Deploy InfluxDB UFW application profile
  ansible.builtin.template:
    src: templates/influxdb-ufw-profile.j2
    dest: "/etc/ufw/applications.d/{{ influxdb_systemd_name }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Reload UFW InfluxDB application profiles
  ansible.builtin.command: "ufw app update {{ influxdb_systemd_name }}"
  become: true
  changed_when: false
  failed_when: false
  tags:
    - install
    - config

- name: Allow InfluxDB through UFW using application profile
  ansible.builtin.ufw:
    rule: allow
    name: "InfluxDB"
    comment: "Allow InfluxDB ({{ databases_influxdb.port }}/tcp) from LOCAL NET"
    src: "{{ item }}"
  loop: "{{ networking_networks.local }}"
  become: true
  tags:
    - never
    - firewall

- name: Confirm InfluxDB UFW profile is allowed for local networks
  ansible.builtin.command: "ufw status numbered"
  register: influxdb_ufw_status
  changed_when: false
  tags:
    - never
    - firewall

- name: Assert InfluxDB UFW rule exists for each local network
  ansible.builtin.assert:
    that:
      - "'InfluxDB' in influxdb_ufw_status.stdout and item in influxdb_ufw_status.stdout"
    fail_msg: "InfluxDB UFW rule is NOT present for {{ item }}"
    success_msg: "InfluxDB UFW rule is present for {{ item }}"
  loop: "{{ networking_networks.local }}"
  tags:
    - never
    - firewall

- name: Remove UFW rules for InfluxDB application profile on uninstall
  when: uninstall_confirmation | bool
  ansible.builtin.ufw:
    rule: deny
    name: "InfluxDB"
    delete: true
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

- name: Remove InfluxDB UFW application profile on uninstall
  when: uninstall_confirmation | bool
  ansible.builtin.file:
    path: "/etc/ufw/applications.d/{{ influxdb_systemd_name }}"
    state: absent
  become: true
  tags:
    - uninstall
    - never



## 07. HEALTH CHECKS FOR INFLUXDB
# -----------------------------------------------------------------------------

- name: Check InfluxDB HTTP API /ping endpoint
  ansible.builtin.uri:
    url: "http://{{ databases_influxdb.listen_address }}:{{ databases_influxdb.port }}/ping"
    method: GET
    status_code: 204
    return_content: no
    timeout: 5
  register: influxdb_ping
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert InfluxDB /ping endpoint is healthy
  ansible.builtin.assert:
    that:
      - influxdb_ping.status == 204
    fail_msg: "InfluxDB /ping endpoint is not healthy or not reachable."
    success_msg: "InfluxDB /ping endpoint is healthy."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check InfluxDB /health endpoint
  ansible.builtin.uri:
    url: "http://{{ databases_influxdb.listen_address }}:{{ databases_influxdb.port }}/health"
    method: GET
    status_code: 200
    return_content: yes
    timeout: 5
  register: influxdb_health
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert InfluxDB /health endpoint reports healthy
  ansible.builtin.assert:
    that:
      - influxdb_health.status == 200
      - influxdb_health.json.status is defined
      - influxdb_health.json.status == "pass"
    fail_msg: "InfluxDB /health endpoint does not report healthy."
    success_msg: "InfluxDB /health endpoint reports healthy."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check InfluxDB version
  ansible.builtin.command: "{{ influxdb_binary_path }} version"
  register: influxdb_version
  changed_when: false
  failed_when: influxdb_version.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Show InfluxDB version
  ansible.builtin.debug:
    var: influxdb_version.stdout
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check InfluxDB service status with systemd
  ansible.builtin.systemd:
    name: "{{ influxdb_systemd_name }}"
  register: influxdb_service_status
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert InfluxDB service is running
  ansible.builtin.assert:
    that:
      - influxdb_service_status.status.ActiveState == "active"
    fail_msg: "InfluxDB service is NOT active."
    success_msg: "InfluxDB service is active."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check InfluxDB TCP port is open
  ansible.builtin.wait_for:
    host: "{{ databases_influxdb.listen_address }}"
    port: "{{ databases_influxdb.port }}"
    state: started
    timeout: 5
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check disk space for InfluxDB data directory
  ansible.builtin.command: "df -h {{ influxdb_data_dir }}"
  register: influxdb_disk
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Show disk space for InfluxDB data directory
  ansible.builtin.debug:
    var: influxdb_disk.stdout_lines
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check InfluxDB log for recent errors
  ansible.builtin.shell: "journalctl -u {{ influxdb_systemd_name }} --since '5 minutes ago' | grep -i error || true"
  register: influxdb_recent_errors
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Show recent InfluxDB errors from logs
  ansible.builtin.debug:
    var: influxdb_recent_errors.stdout_lines
  tags:
    - install
    - config
    - verify
    - healthcheck