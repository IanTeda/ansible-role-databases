---

# ====================================================================================================
# Ansible Task File: roles/databases/tasks/valkey-debian.yaml
# ----------------------------------------------------------------------------------------------------
# Purpose: Automated installation, configuration, and hardening of Valkey (Redis alternative) on Debian systems.
# Managed by: Ansible (do not edit on target systems)
#
# Features:
#   - Installs Valkey from official source or binary tarball (not from Debian repo)
#   - Creates dedicated 'valkey' system user and secure directories
#   - Deploys config: /etc/valkey/valkey.conf
#   - Deploys systemd unit: /lib/systemd/system/valkey.service
#   - Installs valkey-server and valkey-cli to /usr/local/bin
#   - Cleans up temporary files after install
#   - Verifies service status and health (ping, info, memory, role)
#   - Optionally sets up UFW firewall and Prometheus metrics
#   - Supports password authentication and secure config
#
# Variables:
#   - databases_valkey.release: Valkey version (e.g., 8.1.2)
#   - databases_valkey.user: System user to run Valkey (default: valkey)
#   - databases_valkey.port: Listen port (default: 6379)
#   - databases_valkey.password: Optional password for authentication
#   - local_networks: List of allowed networks for UFW
#
# Requirements:
#   - Debian-based system
#   - Systemd
#   - Sufficient privileges (become: true)
#
# Security Notes:
#   - Service runs as unprivileged 'valkey' user
#   - Data and log directories are owned by 'valkey' and not world-readable
#   - Config file permissions are restrictive (0640)
#   - Password authentication is supported and tested if enabled
#
# Troubleshooting:
#   - Check logs: journalctl -u valkey, /var/log/valkey/databases_valkey.log
#   - Test manually: valkey-cli -a <password> ping
#   - If service fails, check /etc/valkey/databases_valkey.conf and permissions
#
# References:
#   - https://valkey.io/
#   - https://valkey.io/docs/
#   - https://github.com/valkey-io/valkey
#
# Changelog:
#   - 2025-06-30: Initial version created; documentation updated
#   - 2025-07-30: Header updated for clarity and automation
#   - 2025-07-31: Header expanded for completeness and best practices
# ====================================================================================================



## 00. SET VALKEY ANSIBLE FACTS
# This makes it easier to read the ansible tasks
# -----------------------------------------------------------------------------

- name: Set Valkey facts for the role
  ansible.builtin.set_fact:
    valkey_user: "{{ databases_valkey.user }}"
    valkey_group: "{{ databases_valkey.group }}"
    valkey_home_dir: "/opt/{{ databases_valkey.user }}"
    valkey_config_dir: "/etc/{{ databases_valkey.user }}"
    valkey_config_file: "/etc/{{ databases_valkey.user }}/{{ databases_valkey.user }}.conf"
    valkey_data_dir: "/data/{{ databases_valkey.user }}"
    valkey_systemd_name: "{{ databases_valkey.user }}"
    valkey_binary_download_url: "https://download.databases_valkey.io/releases/valkey-{{ databases_valkey.release }}-jammy-x86_64.tar.gz"
    valkey_repo_download_url: "https://github.com/valkey-io/valkey/archive/refs/tags/{{ databases_valkey.release }}.tar.gz"
    valkey_binary_path: "/usr/local/bin/{{ databases_valkey.user }}"
  tags:
    - install
    - build
    - config
    - healthcheck

- name: Display Valkey variables for debugging
  ansible.builtin.debug:
    var: databases_valkey
  tags:
    - debug

- name: Display Valkey facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> valkey_user: {{ valkey_user }}"
      - "Fact -> valkey_group: {{ valkey_group }}"
      - "Fact -> valkey_home_dir: {{ valkey_home_dir }}"
      - "Fact -> valkey_config_dir: {{ valkey_config_dir }}"
      - "Fact -> valkey_config_file: {{ valkey_config_file }}"
      - "Fact -> valkey_data_dir: {{ valkey_data_dir }}"
      - "Fact -> valkey_systemd_name: {{ valkey_systemd_name }}"
      - "Fact -> valkey_binary_download_url: {{ valkey_binary_download_url }}"
      - "Fact -> valkey_repo_download_url: {{ valkey_repo_download_url }}"
      - "Fact -> valkey_binary_path: {{ valkey_binary_path }}"
  tags:
    - debug

- name: Confirm Valkey uninstallation
  ansible.builtin.pause:
    prompt: |
      ‚ö†Ô∏è  WARNING: Valkey Uninstallation Confirmation ‚ö†Ô∏è
      
      You are about to completely uninstall the Valkey service from this system.
      
      This will remove:
      üóëÔ∏è  Service binary: {{ valkey_binary_path }}
      üóëÔ∏è  Systemd service: {{ valkey_systemd_name }}.service
      üóëÔ∏è  Configuration files: {{ valkey_config_dir }}/
      üóëÔ∏è  User account: {{ valkey_user }}
      üóëÔ∏è  UFW firewall rules: valkey profile
      üóëÔ∏è  Prometheus scraper config: /etc/prometheus/conf.d/{{ valkey_systemd_name }}.yml

      ‚ùó This action will stop metrics collection from your Valkey instance!
      üìä Historical metrics data in Prometheus will be preserved
      
      Are you sure you want to proceed with the uninstallation? (yes/no)
  register: uninstall_confirmation
  tags:
    - never
    - uninstall

- name: Uninstallation Aborted
  ansible.builtin.fail:
    msg: |
      üõë Uninstallation aborted by user choice

      The Valkey service remains installed and operational.
      No changes have been made to the system.
  when: not (uninstall_confirmation.user_input | bool)
  tags:
    - never
    - uninstall



## 01. SHUTDOWN VALKEY SERVICES
# This section ensures that the service is stopped before config any changes and
# updates are applied to prevent conflict issues.
# -----------------------------------------------------------------------------

- name: Check if Valkey service exists
  ansible.builtin.stat:
    path: "/lib/systemd/system/{{ valkey_systemd_name }}.service"
  register: service_file
  tags:
    - install
    - config

- name: Ensure Valkey service is stopped before modifying
  ansible.builtin.systemd:
    name: "{{ valkey_systemd_name }}"
    state: stopped
  become: true
  failed_when: false
  when: service_file.stat.exists
  tags:
    - install
    - config

- name: Stop and disable Valkey service during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: "{{ valkey_systemd_name }}"
    state: stopped
    enabled: no
  become: true
  failed_when: false
  tags:
    - uninstall
    - never



## 02. SET UP VALKEY USER & CREATE SERVICE DIRECTORIES
# This section sets up the system user and group to run the service and create
# all the directories for the service
# -----------------------------------------------------------------------------

- name: Create Valkey system user
  ansible.builtin.user:
    name: "{{ valkey_user }}"
    system: true
    shell: /usr/sbin/nologin
    create_home: false
    comment: "Valkey Service system account"
  become: true
  tags:
    - install

- name: Create directories for Valkey service
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ valkey_user }}"
    group: "{{ valkey_group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ valkey_config_dir }}", mode: "u=rwx,g=r,o="}
    - { path: "{{ valkey_data_dir }}",   mode: "u=rwx,g=,o="}
  become: true
  tags:
    - install

- name: Remove directories for Valkey service during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: "{{ valkey_config_dir }}", mode: "u=rwx,g=r,o="}
    - { path: "{{ valkey_data_dir }}",   mode: "u=rwx,g=,o="}
  become: true
  tags:
    - never 
    - uninstall



## 03. DOWNLOAD, INSTALL BINARIES & VERIFY VALKEY
# This section downloads any source or binary files, compiles if needs be and installs
# into the `/usr/local/bin/`
# -----------------------------------------------------------------------------

- name: Download Valkey binary tarball from databases_valkey.io (x86_64)
  ansible.builtin.get_url:
    url: "{{ valkey_binary_download_url }}"
    dest: "/tmp/valkey-{{ databases_valkey.release }}.tar.gz"
    mode: '0644'
  tags:
    - never
    - binary

- name: Extract Valkey tarball
  ansible.builtin.unarchive:
    src: "/tmp/valkey-{{ databases_valkey.release }}.tar.gz"
    dest: "{{ valkey_home_dir }}"
    remote_src: true
    creates: "/tmp/valkey/valkey-server"
    extra_opts:
      - --strip-components=1
  tags:
    - never
    - binary

- name: Copy Valkey binaries to /usr/local/bin
  ansible.builtin.copy:
    src: "{{ valkey_home_dir }}/bin/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    remote_src: true
    owner: root
    group: root
    mode: '0755'
  loop:
    - valkey-server
    - valkey-cli
  become: true
  tags:
    - never
    - binary

- name: Clean up downloaded Valkey binary tarball and extracted files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/databases_valkey.tar.gz"
    - "/tmp/valkey"
  tags:
    - never
    - binary

- name: Ensure build dependencies are installed
  ansible.builtin.apt:
    name:
      - build-essential
      - tcl
      - pkg-config
      - git
      - ca-certificates
    state: present
    update_cache: yes
  become: true
  tags:
    - build
    - install

- name: Download Valkey source release "{{ databases_valkey.release }}" tarball
  ansible.builtin.get_url:
    url: "{{ valkey_repo_download_url }}"
    dest: "/tmp/valkey-{{ databases_valkey.release }}.tar.gz"
    mode: '0644'
  become: true
  tags:
    - build
    - install

- name: Ensure Valkey source tmp directory exists before extract
  ansible.builtin.file:
    path: "/tmp/valkey-{{ databases_valkey.release }}"
    state: directory
    owner: "{{ valkey_user }}"
    group: "{{ valkey_group }}"
    mode: '0755'
  become: true
  tags:
    - install

- name: Extract Valkey source release
  ansible.builtin.unarchive:
    src: "/tmp/valkey-{{ databases_valkey.release }}.tar.gz"
    dest: "/tmp/valkey-{{ databases_valkey.release }}"
    remote_src: true
    extra_opts:
      - --strip-components=1
  become: true
  tags:
    - build
    - install

- name: Build Valkey from source
  ansible.builtin.command: make
  args:
    chdir: "/tmp/valkey-{{ databases_valkey.release }}/"
  become: true
  tags:
    - build
    - install

- name: Run Valkey tests
  ansible.builtin.command: make test
  args:
    chdir: "/tmp/valkey-{{ databases_valkey.release }}/"
  ignore_errors: true
  become: true
  tags:
    - build-test
    - never

- name: Install Valkey binaries to /usr/local/bin
  ansible.builtin.command: make install
  args:
    chdir: "/tmp/valkey-{{ databases_valkey.release }}/"
  become: true
  tags:
    - build
    - install

- name: Verify Valkey binaries are installed and executable
  ansible.builtin.command: "{{ item }} --version"
  loop:
    - valkey-server
    - valkey-cli
  register: valkey_bin_check
  changed_when: false
  failed_when: valkey_bin_check.rc != 0
  tags:
    - install
    - verify

- name: Show Valkey server and CLI versions
  ansible.builtin.debug:
    msg: |
      - valkey-server version: {{ valkey_bin_check.results[0].stdout | default('N/A') }}
      - valkey-cli version:    {{ valkey_bin_check.results[1].stdout | default('N/A') }}
  when: valkey_bin_check is defined and valkey_bin_check.results is defined
  tags:
    - install
    - verify




## 04. SETUP CONFIG FILES FOR VALKEY
# This section sets up the configuration files file for the service
# -----------------------------------------------------------------------------

- name: Deploy Valkey configuration file to "{{ valkey_config_file }}"
  ansible.builtin.template:
    src: "templates/valkey.conf.j2"
    dest: "{{ valkey_config_file }}"
    owner: "{{ valkey_user }}"
    group: "{{ valkey_group }}"
    mode: '0640'
  become: true
  tags:
    - install
    - config

# See: https://github.com/jemalloc/jemalloc/issues/1328 for why overcommit_memory is important for Redis/Valkey fork() operations
- name: Ensure memory overcommit is enabled for Valkey
  ansible.builtin.sysctl:
    name: vm.overcommit_memory
    value: '1'
    state: present
    sysctl_set: true
    reload: true
  become: true
  tags:
    - never
    - sysctl-on

- name: Apply vm.overcommit_memory=1 immediately
  ansible.builtin.command: sysctl vm.overcommit_memory=1
  become: true
  changed_when: false
  tags:
    - never
    - sysctl-on

- name: Remove memory overcommit (set to 0)
  ansible.builtin.sysctl:
    name: vm.overcommit_memory
    value: '0'
    state: present
    sysctl_set: true
    reload: true
  become: true
  tags:
    - never
    - sysctl-off



## 05. SETUP SYSTEMD FOR VALKEY
# This section sets up the systemd unit file for the service
# -----------------------------------------------------------------------------

- name: Deploy Valkey systemd service unit
  ansible.builtin.template:
    src: templates/valkey-systemd.service.j2
    dest: "/lib/systemd/system/{{ valkey_systemd_name }}.service"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Verify Valkey systemd service config is valid
  ansible.builtin.command: systemd-analyze verify /lib/systemd/system/{{ valkey_systemd_name }}.service
  register: systemd_verify
  changed_when: false
  failed_when: systemd_verify.rc != 0
  tags:
    - install
    - config
    - verify

- name: Reload systemd and start Valkey service
  ansible.builtin.systemd_service:
    daemon_reload: true
    name: "{{ valkey_systemd_name }}"
    enabled: true
    state: started
  become: true
  tags:
    - install
    - config

- name: Check Valkey service status
  ansible.builtin.systemd:
    name: "{{ valkey_systemd_name }}"
  register: valkey_status
  become: true
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Wait for Valkey server to be available
  ansible.builtin.wait_for:
    host: "{{ databases_valkey.listen_address }}"
    port: "{{ databases_valkey.port }}"
    timeout: 30
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert Valkey is running
  ansible.builtin.assert:
    that:
      - valkey_status.status.ActiveState == "active"
      - valkey_status.status.SubState == "running"
    fail_msg: "Valkey service is not running! Status: {{ valkey_status.status.ActiveState }}"
    success_msg: "Valkey service is running successfully."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Delete Systemd service for Valkey
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: "/lib/systemd/system/{{ valkey_systemd_name }}.service"
    state: absent
  become: true
  tags:
    - never 
    - uninstall

- name: Reload systemd after removing service
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd_service:
    daemon_reload: true
  become: true
  tags:
    - never 
    - uninstall



## 06. SETUP FIREWALL FOR VALKEY
# This section sets up the firewall rules to allow the service traffic
# -----------------------------------------------------------------------------


- name: Deploy Valkey UFW application profile
  ansible.builtin.template:
    src: templates/valkey-ufw-profile.conf.j2
    dest: "/etc/ufw/applications.d/{{ valkey_systemd_name }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Reload UFW Valkey application profiles
  ansible.builtin.command: "ufw app update {{ valkey_systemd_name }}"
  become: true
  changed_when: false
  failed_when: false
  tags:
    - install
    - config

- name: Allow Valkey through UFW using application profile
  ansible.builtin.ufw:
    rule: allow
    name: "Valkey"
    comment: "Allow Valkey ({{ databases_valkey.port }}/tcp) from LOCAL NET"
    src: "{{ item }}"
  loop: "{{ networking_networks.local }}"
  become: true
  tags:
    - never
    - firewall

- name: Confirm Valkey UFW profile is allowed for local networks
  ansible.builtin.command: "ufw status numbered"
  register: ufw_status
  changed_when: false
  tags:
    - never
    - firewall

- name: Assert Valkey UFW rule exists for each local network
  ansible.builtin.assert:
    that:
      - "'Valkey' in ufw_status.stdout and item in ufw_status.stdout"
    fail_msg: "Valkey UFW rule is NOT present for {{ item }}"
    success_msg: "Valkey UFW rule is present for {{ item }}"
  loop: "{{ local_networks }}"
  tags:
    - never
    - firewall

- name: Remove UFW rules for Valkey application profile on uninstall
  when: uninstall_confirmation
  ansible.builtin.ufw:
    rule: deny
    name: "Valkey"
    delete: true
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

- name: Remove Valkey UFW application profile
  when: uninstall_confirmation
  ansible.builtin.file:
    path: "/etc/ufw/applications.d/{{ valkey_systemd_name }}"
    state: absent
  become: true
  tags:
    - uninstall
    - never



## 07. SETUP NGINX PROXY FOR VALKEY
# This section sets up the Nginx proxy location
# -----------------------------------------------------------------------------

# Nil



## 08. HEALTH CHECKS FOR VALKEY
# This section runs the healthcheck for the service to confirm it is running
# as expected
# -----------------------------------------------------------------------------

- name: Test Valkey password authentication
  ansible.builtin.command: valkey-cli -a "{{ databases_admin.password }}" -p "{{ databases_valkey.port }}" ping
  register: valkey_auth_ping
  changed_when: false
  failed_when:
    - valkey_auth_ping.rc != 0
    - valkey_auth_ping.stdout.strip() != 'PONG'
  when: databases_admin.password is defined and databases_admin.password|length > 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Show Valkey ping result
  ansible.builtin.debug:
    msg: "Valkey ping result: {{ valkey_auth_ping.stdout }}"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Get Valkey INFO output
  ansible.builtin.command: valkey-cli -a "{{ databases_admin.password }}" -p "{{ databases_valkey.port }}" info
  register: valkey_info
  changed_when: false
  failed_when: valkey_info.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check Valkey used memory is below 90% of system memory
  ansible.builtin.shell: |
    total_mem=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
    used_mem=$(valkey-cli -a "{{ databases_admin.password }}" -p "{{ databases_valkey.port }}" info | awk -F: '/used_memory:/ {print $2}' | head -n1)
    # Convert to kB for comparison
    used_mem_kb=$((used_mem/1024))
    threshold=$((total_mem * 90 / 100))
    if [ "$used_mem_kb" -lt "$threshold" ]; then exit 0; else exit 1; fi
  register: valkey_mem_check
  changed_when: false
  failed_when: valkey_mem_check.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck
